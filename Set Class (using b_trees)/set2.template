// This is the implementation file for the template class set.
// See interface in set2.h
//
//-------- Copyright © ---------
//  @Author: Adnan Hashem Mohamed
//-------------------------------
//
// CLASS INVARIANT:
// 1- The items of the set are stored in a B-tree, satisfying the six B-tree rules.
// 2. The number of entries in the tree’s root is stored in the member variable data_count,
//	  and the number of subtrees of the root is stored in the member variable child_count.
// 3. The root’s entries are stored in data[0] through data[data_count-1].
// 4. If the root has subtrees, then these subtrees are stored in sets pointed to by
//	  the pointers subset[0] through subset[child_count-1].


namespace set2_adnan{

	// HELPER FUNCITONS FOR IMPLEMENTATION.

    template<class Item>
    std::size_t set<Item>::get_index(const Item& target)const
        // Postcondition: the index returned suffices the following:
        // target <= data[i] or data.size() <= i.
    {
        std::size_t i = 0;
        while (i < data.size() && data[i] < target)
            ++i;
        return i;
    }

    template<class Item>
    bool set<Item>::found(std::size_t i, const Item& target)const
        // Postcondition: returns true if target is in the root.
        // else false.
    {
        if (i < data.size() && !(target < data[i]))
            return true;
        else
            return false;
    }


    // set public members implementation

    template<class Item>
	set<Item>::set()
	{
		//data_count = 0;
		//child_count = 0;
	}

    template<class Item>
	void set<Item>::clear()
	{
        data.clear();
		for(std::size_t i = 0; i < subset.size(); ++i)
		{
		  subset[i]->clear(); // clear the subtrees
		}
        subset.clear();

	}

    template<class Item>
	std::size_t set<Item>::size()const
	{
		auto sum = data.size();
		for (size_t i = 0; i < subset.size(); ++i)
			sum += subset[i]->size();
		return sum;
	}

    	template<class Item>
	std::size_t set<Item>::count(const Item& target) const
        // Postcondition: Returns 1 if the target is in the set else returns 0.
	{
		// find 'i' such that data[i] >= target
		std::size_t i = get_index(target);

		if (found(i, target))
			return 1;
		else if (subset.size() <= i)  // no possible child has the target (base on how elements are sorted ascendantly)
			return 0;
		else
			return subset[i]->count(target);	// search the target in the "correct" subtree
	}

	template<class Item>
	set<Item>::set(const set<Item>& source)
	{
		for (auto it : source.subset)
			subset.push_back(new set<Item>(*it));
		data = source.data;
	}

	template<class Item>
	set<Item>& set<Item>::operator =(const set<Item>& source)
	{
		if (this != &source)
		{
			clear();										   
			for (auto it : source.subset) // deep copy of the pointers of subtrees
				subset.push_back(new set<Item>(*it));
			data = source.data;
		}
		return *this;
	}

	// ========================================
	// FUNCITONS FOR INSERTION 
	template <class Item> 
	bool set<Item>::loose_insert(const Item& entry)
		// Precondition: The entire B-tree is valid. 
		// Postcondition: If entry was already in the set, then the set is unchanged 
		// and the return value is false. Otherwise, the entry has been added to the 
		// set, the return value is true, and the entire B-tree is still 
		// valid EXCEPT that the number of entries in the root of this set might be 
		// one more than the allowed maximum.
	{
		// find 'i' such that data[i] >= entry
		std::size_t i = get_index(entry);
		// now i could be equal to data_count which is out-of-range index
		// or it is the wanted index

		// don't change the set if it already has the element.
		if (found(i, entry))
			return false;
		else if (is_leaf())
		{
			// insert the new entry in the root.
			data.insert(data.begin()+i, entry);
			return true;
		}
		else
		{
			bool is_inserted = subset[i]->loose_insert(entry); // insert the element in the "correct" subset

			// check if the subset has extra entry, then fix it.
			if (subset[i]->data.size() > MAXIMUM)
				fix_excess(i);
			return is_inserted;
		}
	}

	template<class Item>
	bool set<Item>::insert(const Item& entry)
	{
		if (!loose_insert(entry))
			return false;
		if (data.size() > MAXIMUM)
		{
			// creating a new child that holds the current b-tree
			set<Item>* new_child = new set<Item>(*this);

			// erasing the current root to be empty
			clear();

			// giving the root a child which is the original b-tree/set.
			subset.push_back(new_child);

			// The 1st child has excess element, fix it.
			fix_excess(0);
		}

		return true;
	}

	template <class Item>
	void set<Item>::fix_excess(std::size_t i)
		// Precondition: (i < child_count) and the entire B-tree is valid EXCEPT that 
		// subset[i] has MAXIMUM + 1 entries. 
		// Postcondition: The tree has been rearranged so that the entire B-tree is 
		// valid EXCEPT that the number of entries in the root of this set might be 
		// one more than the allowed maximum. 
	{
		// spliting the problamatic node.
		set<Item>* left_set = new set<Item>;
		set<Item>* right_set = new set<Item>;
		auto half_element = subset[i]->data.begin() + MINIMUM; // The middle element of the excess node.
		left_set->data.insert(left_set->data.begin(), subset[i]->data.begin(), half_element); // copy the elements of the excess node from the beginning up to the middle (excluded)
 		right_set->data.insert(right_set->data.begin(), half_element+1, half_element + MINIMUM + 1); // copy the elements of the excess node after the middle and to the end.

		// equally giving each new set its children.
		if (!subset[i]->is_leaf())
		{
			for (size_t j = 0; j < (MAXIMUM) / 2 + 1; ++j)
				left_set->subset.push_back(new set<Item>(*(subset[i]->subset[j])));
			for (size_t k = 0, j = (MAXIMUM) / 2 + 1; j < (MAXIMUM)+2; ++k, ++j)
				right_set->subset.push_back(new set<Item>(*(subset[i]->subset[j])));
		}

		// passing the middle entry of the excess node's root to its parent
		if (data.size() > 0)
		{
			data.insert(data.begin() + i, *half_element);
		}
		else
		{
			data.push_back(*half_element);
		}

        // adjusting the children of the root after spliting the node into two.
		subset.erase(subset.begin() + i);
		subset.insert(subset.begin() + i, left_set);
		subset.insert(subset.begin() + i + 1, right_set);

	}
	// =========================================

	//==========================================
	// FUNCITONS FOR DELETION
    template<class Item>
    void set<Item>::transfer_element(std::size_t i, bool right)
        // Precondition: subset[i] has elements less than MIN.
        // Postcondition: if 'right' is true, then ith element of the root is transfered to
        // the end element of subset[i] and subset[i+1] first element is given to the root in place of the taken element.
        // else, we are going to take an element from subset[i-1]. The first element will have data[i-1] and 
        // data[i] will be subset[i-1]'s last element.
    {
        if (right)
        {
            subset[i]->data.push_back(data[i]);
            data[i] = subset[i + 1]->data[0];
            subset[i + 1]->data.erase(subset[i + 1]->data.begin());// erasing the 0th element.
        }
        else
        {
            // inserting data[i-1] to beginning of subset[i] elements
            subset[i]->data.insert(subset[i]->data.begin(),data[i - 1]);
            data[i - 1] = subset[i - 1]->data.back();
            subset[i - 1]->data.erase(subset[i-1]->data.end()-1); // erases the last element
        }
    }

    template<class Item>
    void set<Item>::transfer_child(std::size_t i, bool right)
        // Precondition: i is the index of the a node which is missing a child.
        // 'right' is true means we will take a child from the right node, 'right' being false
        // means we will take a child from the left node.
        // Postcondition: if 'right' is true, the first child from subset[i+1] is now
        // the last child of subset[i]. Else, the last child of subset[i-1] is the first child in subset[i]
    {
        if (!right)
        {
            // take the last child of subset[i-1] and give it to subset[i]
            if (!subset[i-1]->is_leaf())
            {
                auto last_child = subset[i - 1]->subset.back(); // left subset's last child
                subset[i]->subset.insert(subset[i]->subset.begin(), last_child); // make the last child of the left subset be the 1st child of subset[i]
                subset[i - 1]->subset.erase(subset[i - 1]->subset.end() - 1);   // erasing the last child.
            }
        }
        else
        {
            // take the last child of subset[i+1] and give it to subset[i]
            if (!subset[i + 1]->is_leaf())
            {
                auto right_first_child = subset[i + 1]->subset.begin();
                subset[i]->subset.push_back(*right_first_child);
                subset[i + 1]->subset.erase(right_first_child);
            }
        }
    }

    template<class Item>
    void set<Item>::combine(std::size_t i, bool right)
        // Precondition: subset[i] elements are less than MIN.
        // Postcondition: if right == true, then subset[i] is combined to subset[i+1]
        // else subset[i] is combined to subset[i-1]
    {
        if (right)
        {
            // giving subset[i] an element from the root.
            subset[i]->data.push_back(data[i]);
            data.erase(data.begin() + i);

            // combining subset[i] elements and children to subset[i+1]
            subset[i + 1]->data.insert(subset[i + 1]->data.begin(), subset[i]->data.begin(), subset[i]->data.end());
            subset[i + 1]->subset.insert(subset[i + 1]->subset.begin(), subset[i]->subset.begin(), subset[i]->subset.end());

        }
        else
        {
            // giving subset[i] an element from the root.
            subset[i]->data.insert(subset[i]->data.begin(), data[i - 1]);
            data.erase(data.begin() + i - 1);
            // combining subset[i] elements and children to subset[i+1]
            for (auto element : subset[i]->data)
                subset[i - 1]->data.push_back(element);
            for (auto child : subset[i]->subset)
                subset[i - 1]->subset.push_back(child);
        }

        // removing subset[i] since it is combined with the left or right subset.
        subset.erase(subset.begin() + i);
    }

    template<class Item>
    void set<Item>::remove_biggest(Item& removed_entry)
        // Precondition: (data_count > 0) and the entire B-tree is valid. 
        // Postcondition: The largest item in the set has been removed, and a copy 
        // of this removed entry has been placed in removed_entry. The entire 
        // B-tree is still valid, EXCEPT that the number of entries in the root of this 
        // set might be one less than the allowed minimum.
    {
        if (is_leaf())
        {
            removed_entry = data.back();
            data.erase(data.end() - 1);
        }
        // removing the biggest element in the subset
        else
            subset.back()->remove_biggest(removed_entry);

        if (!is_leaf() && subset.back()->data.size() < MINIMUM)
            fix_shortage(subset.size() - 1);
    }

    template<class Item>
    bool set<Item>::loose_erase(const Item& target)
        // Precondition: The entire B-tree is valid. 
        // Postcondition: If target was not in the set, then the set is unchanged and 
        // the return value is false. Otherwise, the target has been removed, the 
        // return value is true, and the entire B-tree is still valid 
        // EXCEPT that the number of entries in the root of this set might be one 
        // less than the allowed minimum
    {
        auto i = get_index(target);
        if (!found(i, target) && is_leaf())  // target not in root and root has no child.
            return false;
        else if (found(i, target) && is_leaf()) // target is found and the root has no children
        {
            // removing the element
            data.erase(data.begin() + i);
            return true;
        }
        else if (!is_leaf() && !found(i, target)) // target is not in the root but maybe in its children
        {
            bool is_erased = subset[i]->loose_erase(target); // this may cause the root to have shortage in elements
            if (subset[i]->data.size() < MINIMUM)  // to check if shortage happend.
                fix_shortage(i);
            return is_erased;
        }
        else if (!is_leaf() && found(i, target))  // target in root and root has no children
        {
            subset[i]->remove_biggest(data[i]);
            if (subset[i]->data.size() < MINIMUM)
                fix_shortage(i);
            return true;
        }
    }

    template<class Item>
    void set<Item>::fix_shortage(std::size_t i)
        // Precondition: (i < child_count) and the entire B-tree is valid EXCEPT that 
        // subset[i] has MINIMUM - 1 entries. 
        // Postcondition: The tree has been rearranged so that the entire B-tree is 
        // valid EXCEPT that the number of entries in the root of this set might be 
        // one less than the allowed minimum.
    {
        if (i > 0 && subset[i - 1]->data.size() > MINIMUM) // subset[i-1] has enough elements to give subset[i]
        {
            transfer_element(i, false);  // handles the transfer from root to subset[i] and from subset[i-1] to root.
            transfer_child(i, false);    // transfering a child from subset[i-1] to subset[i]
        }
        else if (i < subset.size()-1 && subset[i + 1]->data.size() > MINIMUM) // subset[i+1] has enough elements to give subset[i]
        {
            transfer_element(i, true); // giving an element to subset[i] to fix the shortage.
            transfer_child(i, true);  // transfering a child from subset[i+1] to subset[i]
        }
        else if (i > 0)
        {
            combine(i, false);  // combine subset[i] with subset[i-1]
        }
        else
            combine(i, true); // combine subset[i] with subset[i+1]
    }

    template<class Item>
    std::size_t set<Item>::erase(const Item& target)
    {
        if (!loose_erase(target))
            return 0;
        if (data.size() == 0 && !is_leaf())
        {
            set<Item>* temp_set = new set<Item>(*(subset[0]));
            clear();
            data = temp_set->data;
            subset = temp_set->subset;
        }
        return 1;
    }

    //  ******  OPERATORS   **********
    template<class Item>
    void set<Item>::operator+=(const set<Item>& b)
    {
        // The union of the set and itself is the same set.
        if (this != &b)
        {
            for (auto element : b.data)
                insert(element);
            for (auto child : b.subset)
                *this += *child;
        }
    }

    template<class Item>
    set<Item> operator+(const set<Item>& a, const set<Item>& b)
    {
        set<Item> union_a_b(a);
        union_a_b += b;
        return union_a_b;
    }

    template<class Item>
    void set<Item>::operator-=(const set<Item>& b)
    {
        if (this == &b)  // because set_a - set_a is the empty set.
        {
            clear();
            return;
        }

        for (auto element : b.data)
            erase(element);
        for (auto child : b.subset)
            *this -= *child;
    }

    template<class Item>
    set<Item> operator-(const set<Item>& a, const set<Item>& b)
    {
        set<Item> a_not_b(a);
        a_not_b -= b;
        return a_not_b;
    }

    template<class Item>
    set<Item> set<Item>::intersect(const set<Item>& b)
    {
        // a intersection b = a - (a - b)
        auto difference = *this - b;
        return *this- difference;
    }

    template<class Item>
    bool set<Item>::operator==(const set<Item>& b)
    {
        auto a_dif_b = *this - b;
        auto b_dif_a = b - *this;
        return a_dif_b.size() == 0 && b_dif_a.size() == 0;
    }

    template<class Item>
    bool set<Item>::operator!=(const set<Item>& b)
    {
        return !(*this == b);
    }

} // end of namespace