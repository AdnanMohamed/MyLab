// This is the implementation file for the general reusable code which
// might be helpful in future programs.
// See interface in helper.h
//
// @Author: Adnan H. Mohamed
//

#include<cassert> // Provides assert()
#include<cmath> // Provides floor()
namespace helper_adnan{

   template<class Item>
   int binary_search(Item arr[], int size, const Item& target)
   {
       // The array should be sorted in ascending order
       assert(sorted(arr, size));
       
       int first = 0;
       int last = size - 1;
       int middle = floor((first + last)/2.);

       while(first != last && arr[middle] != target)
       {
           if(arr[middle] < target)
           {
             first = middle + 1;
             middle = floor((first + last)/2.);
           }
           else if(target < arr[middle])
           {
             last = middle - 1;
             middle = floor((first + last)/2.);
           }
       }
       if(arr[middle] == target)
        return middle;
       else
        return -1;
   }

   template<class Item>
   void swap(Item& e1, Item& e2)
   {
     Item temp = e1;
     e1 = e2;
     e2 = temp;
   }

   template<class Item>
   void bubble_sort(Item arr[], int size, bool Ascend)
   { 
     int index = 0;
     if(Ascend) // sort from least to greatest such that ( E0 <= E1 <=...<= En )
     {
        while(index < size - 1)
        {
          for(int i = index; i < size - 1; ++i)
          {
            if(arr[i+1] < arr[i])
                swap(arr[i+1], arr[i]);
          }
          --size;
        }
     
     }
     
     else // sort from least to greatest such that ( E0 >= E1 >=...>= En )
     {
        while(index < size - 1)
        {
          for(int i = index; i < size - 1; ++i)
          {
            if(arr[i+1] > arr[i])
                swap(arr[i+1], arr[i]);
          }
          --size;
        }        
     }
     
   }

   	template<class Item>
	bool sorted(Item arr[], int size, bool Ascend)
    {
       if(Ascend)
       {
         for(int i=0; i < size - 1; ++i)
         {
            if(arr[i + 1] < arr[i])
                return false;
         }
         return true;
       }
       else
       {
         for(int i=0; i < size - 1; ++i)
         {
            if(arr[i + 1] > arr[i])
                return false;
         }
         return true;        
       }
    }

} // end of namespace