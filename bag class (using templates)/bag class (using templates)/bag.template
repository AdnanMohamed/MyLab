// FILE: bag.template
// CLASS implemented: bag (see bag.h for documentation)
// NOTE:
//   Since bag is a template class, this file is included in bag.h
// INVARIANT for the bag class:
//   1. The items in the bag are stored on a linked list;
//   2. The head pointer of the list is stored in the member variable head_ptr;
//   3. The total number of items in the list is stored in the member variable
//       many_nodes.

#include <cassert>  // Provides assert
#include <cstdlib>  // Provides NULL, rand
#include "template_node.h"  // Provides node 

namespace template_adnan
{
    template<class Item>
	bag<Item>::bag()
    {
        many_nodes = 0;
		head_ptr = NULL;
    }
    
	template<class Item>
    bag<Item>::bag(const bag& source)
	{
		head_ptr = NULL;
		many_nodes = source.many_nodes;
		list_copy(source.head_ptr, head_ptr);
	}

	template<class Item>
	bag<Item>::~bag()
	{
		many_nodes = 0;
		list_clear(head_ptr);
	}

	template<class Item>
	typename bag<Item>::size_type bag<Item>::erase(const Item& target)
	{
		size_type count = 0;
		node<Item>* temp;
		while (head_ptr != NULL && head_ptr->data() == target)
		{
			list_head_remove(head_ptr);
			++count;
		}
		
		for (temp = head_ptr; temp != NULL; temp = temp->link())
		{
			while (temp->link()!= NULL && temp->link()->data() == target)
			{
				++count;
				list_remove(temp);
			}

		}
		many_nodes -= count;
		return count;
	}

	template<class Item>
    bool bag<Item>::erase_one(const Item& target)
	{
		node<Item>* temp = list_search(head_ptr, target);
		if (head_ptr->data() == target)
		{
			list_head_remove(head_ptr);
			many_nodes--;
			return true;
		}
		for (temp = head_ptr; temp->link() != NULL; temp = temp->link())
		{
			if (temp->link()->data() == target)
			{
				list_remove(temp);
				many_nodes--;
				return true;
			}
		}
		return false;
	}
    
	template<class Item>
	void bag<Item>::insert(const Item& entry)
	{
	    list_head_insert(head_ptr, entry);
		++many_nodes;
	}

	template<class Item>
	void bag<Item>::operator +=(const bag<Item>& addend)
	{
		node<Item>* cursor;
		for (cursor = addend.head_ptr; cursor != NULL; cursor = cursor->link())
		{
			list_head_insert(head_ptr, cursor->data());
			++many_nodes;
		}
	}
	
	template<class Item>
	void bag<Item>::operator =(const bag<Item>& source)
	{
		if (this == &source)  // self-assignment protection
			return;

		many_nodes = source.many_nodes;
		list_clear(head_ptr);
		list_copy(source.head_ptr, head_ptr);
	}

	template<class Item>
	typename bag<Item>::size_type bag<Item>::count(const Item& target) const
	{
		size_type count = 0;
		const node<Item>* cursor = list_search(head_ptr, target);
		while (cursor != NULL)
		{
			++count;
			cursor = list_search(cursor->link(), target);
		}
		return count;
	}
    
	template<class Item>
	Item bag<Item>::grab() const
	{
		int position;
		position = (rand() % many_nodes) + 1;
		return list_locate(head_ptr, position)->data();
	}

	template <class Item>
    bag<Item> operator +(const bag<Item>& b1, const bag<Item>& b2)
	{
		bag<Item> result(b1);
		result += b2;
		return result;
	}

} // end of namespace
