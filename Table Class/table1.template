// This is the implementation file for the template class table<Item>.
// See interface in table1.h
//
//	------ - Copyright © -------- -
//	@Author: Adnan Hashem Mohamed
//	------------------------------ 
//
// CLASS INVARIANT:
//	1. The number of records in the table is in the member variable used.
//	2. The actual records of the table are stored in the array data, 
//	with a maximum of CAPACITY entries. Each used spot in the array has a non-negative key.
//	An unused record in the array has its key field set to the constant NEVER_USED (if it has never been used)
//	or the constant PREVIOUSLY_USED (if it once was used but is now vacant).

namespace table1_adnan{

	template<class RecordType>
	table<RecordType>::table()
	{
		for(int i = 0; i < CAPACITY; ++i)
		{
			data[i].key = NEVER_USED;
		}
		used = 0;
	}

	template<class RecordType>
    void table<RecordType>::insert(const RecordType& entry)
    {
        assert(!is_full());
        std::size_t index;
        bool exists;
        find_index(entry.key, exists, index); // check if there is already an entry with the same key.
        if (!exists)
        {
            index = hash1(entry.key);
            // get the nearest available location [open address technique]
            while (!is_vacant(index) && (data[index].key != entry.key))  
                index = next_index(index, entry.key);
            ++used;
        }
        data[index] = entry;
    }

    template<class RecordType>
    void table<RecordType>::remove(int key)
    {
        bool found = false;
        size_t index = 0;
        find_index(key, found, index);
        if (found)
        {
            // removing the element with specified key from the table
            data[index].key = PREVIOUSLY_USED;
            --used;
        }
    }

    template<class RecordType>
    bool table<RecordType>::is_present(int key) const
    {
        bool present;
        std::size_t index;
        find_index(key, present, index);
        return present;
    }

    template<class RecordType>
    void table<RecordType>::find(int key, bool& found, RecordType& result) const
    {
        std::size_t index;
        find_index(key, found, index);
        if (found)
        {
            result = data[index];
        }
    }

    // HELPER FUNCITONS
    template<class RecordType>   
    std::size_t table<RecordType>::next_index(std::size_t index, int key) const
        // Postcondition: returns index + 1 EXCEPT when index equals
        // the last index in the array, than it returns 0
    {
        return (index + hash2(key)) % CAPACITY;
    }

    template<class RecordType>
    void table<RecordType>::find_index(int key, bool& found, std::size_t& index) const
        // Precondition: 'key' is non-negative.
        // Postcondition: If there exists an element in the table with the given key, then
        // found is set to true and index is the location of the element such that data[index].key == key
        // Otherwise, found is set to false and index is unchanged.
    {
        auto i = hash1(key); // get the hash
        auto first_index = i;
        do
        {
            if (never_used(i))
            {
                // no such entry exists; if the entry once entered
                // in the table then it'll occupy this location.
                break;
            }
            else if (data[i].key == key)
            {
                // This is the target we are looking for!!
                index = i;
                found = true;
                return;
            }
            i = next_index(i, key);
        } while (i != first_index);

        found = false;
    }

    template<class RecordType>
    inline bool table<RecordType>::never_used(std::size_t index) const
    {
        return data[index].key == NEVER_USED;
    }

    template<class RecordType>
    inline bool table<RecordType>::is_vacant(std::size_t index) const
    {
        return data[index].key < 0;
    }

    template<class RecordType>
    inline std::size_t table<RecordType>::hash1(int key) const
    {
        return key % CAPACITY;
    }

    template<class RecordType>
    inline std::size_t table<RecordType>::hash2(int key) const
    {
        return 1 + (key % (CAPACITY-2));
    }
	
} // end of namespace
